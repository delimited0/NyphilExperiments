plot(lgamma(1:100))
lines(lgamma(1:100))
lines(lgamma(1:100))
plot.new
plot.new()
lines(lgamma(1:100))
plot9)
plot()
rpois(10)
rpois(10, 1)
rpois(1, 1)
rpois(1, 100)
rpois(1, 2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
log_gammas <- rbinom(n=100, size=50, prob=.2)
hist(log_gammas)
counts <- rbinom(n=100, size=50, prob=.2)
e_log_gammas <- lgamma(counts)
mean(e_log_gammas)
lgamma(.2)
lgamma(.2*50)
probs <- seq(from=0, to = 1, by = .1)
counts <- apply(probs, 1, function(x) rbinom(n=100, size=50, prob=x))
counts <- sapply(probs, 1, function(x) rbinom(n=100, size=50, prob=x))
counts <- sapply(probs, function(x) rbinom(n=100, size=50, prob=x))
counts
e_log_gammas <- lgamma(counts)
warnings9)
warnings())
warnings()
lgamma(0)
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=50, prob=x))
e_log_gammas <- lgamma(counts)
probs
counts
e_log_gammas
mean(e_log_gammas)
rowMeans(e_log_gammas)
counts
colMeans(e_log_gammas)
lgamma(probs*50)
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
plot(x=probs, y= cbind(actual, approx))
plot(x=probs, y= rbind(actual, approx))
plot(x=probs, y= actual)
plot(x=probs, y=list(actual, approx))
cbind(actual, approx)
plot(cbind(actual, approx))
plot(x=probs, cbind(actual, approx))
plot(x=t(probs), cbind(actual, approx))
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=10, prob=x))
e_log_gammas <- lgamma(counts)
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=10, prob=x))
e_log_gammas <- lgamma(counts)
e_log_gammas
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
plot(actual, approx)
approx
actual
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=100, prob=x))
e_log_gammas <- lgamma(counts)
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
plot(actual, approx)
actual
approx
e_log_gammas
actual
approx
2780*12
5700*4
62/3
setwd("~/Documents/Projects/PerformanceHistory")
install.packages("jsonlite")
library(jsonlite)
dir()
foo <- fromJSON('/Programs/json/1842-43_TO_1910-11.json')
foo <- fromJSON('Programs/json/1842-43_TO_1910-11.json')
foo[[1]]
length(foo)
foo$programs$season
foo$programs$concerts
length(foo$programs$concerts)
length(foo$programs$concerts[[1]]
)
foo$programs$concerts[1,]
foo$programs$concerts[1]
foo$programs$concerts[2]
foo$programs$concerts[3]
foo$programs$concerts[4]
foo$programs$concerts[5]
foo$programs$concerts[6]
foo$programs$concerts[7]
dim(foo$programs$works)
foo$programs$works
foo$programs$works[[1]]
foo$programs$works[[100]]
foo$programs$works[[150]]
foo$programs$works[[150]]$composerName
foo$programs$programID
foo$programs$season
foo$programs$concerts
foo$programs$concerts[1]
foo$programs$concerts[100]
foo$programs$concerts[1000]
merge
?merge
ls()
dir('Programs/json')
files
json_files <- dir('Programs/json')
programs
?fromJSON
fromJSON('Programs/json/1842-43_TO_1910-11.json')
programs <- fromJSON('complete.json')
programs <- fromJSON('Programs/json/complete.json')
programs$programs$programID
programs$programs$concerts[1]
programs$programs$concerts[2]
programs$programs$concerts[3]
dim(programs$programs$concerts)
programs$programs$concerts[[1]]
programs$programs$concerts[[2]]
programs$programs$concerts[[9000]]
programs$programs$works[[9000]]
programs$programs$works[[1]]
programs$programs$works
programs$programs$works[[1]]
programs$programs$works[[2]]
length(programs)
length(programs$programs$programID)
programs$programs$works[[8000]]
programs$programs$works[[10]]
programs$programs$works[[5]]
programs$programs$works[[2]]
programs$programs$works[[8000]]
programs$programs$works[[1000]]
programs$programs$works[[10000]]
programs <- programs$programs
typeof(programs)
programs$orchestra
typeof(programs$orchestra)
unique(programs$orchestra)
programs$works[[1:10]]
programs$works[1:10]
merge(programs$works[1:10])
rbind.pages(programs$works[1:10])
install.packages("plyr")
install.packages("plyr")
rbind.pages(programs$works[1:10])
composerNames <- rbind.pages(programs$works)$composerName
composerNames <- Reduce(function(...) merge(..., all=T), programs$works)$composerName
?merge
programs$works[[1]]
programs$works[[2]]
composerNames <- Reduce(c, programs$works$composerName)
composerNames <- Reduce(function(x,y) c(x,y), programs$works$composerName)
programs$works[[2]]$composerName
composerNames <- Reduce(function(x,y) c(x$composerName, y$composerName), programs$works)
programs$works[[3]]$composerName
c(programs$works[[2]]$composerName, programs$works[[3]]$composerName)
c(programs$works[[1]]$composerName, programs$works[[3]]$composerName)
?Reduce
composerNames <- Reduce(c, Map(function(x) x$composerName, programs$works))
composerNames
composerNames[is.na(composerNames)] <- NULL
is.na(composerNames)
composerNames <- composerNames[-is.na(composerNames)]
composerNames
composerNames[-is.na(composerNames)]
foo <- composerNames[1:10]
foo <- composerNames[-is.na(composerNames)]
foo
foo[[9992]]
foo[9992]
is.na(foo[9992])
foo[[1]]
foo[1]
foo[1] <- NULL
composerNames <- composerNames[-is.na(composerNames)]
composerNames
composerNames <- Reduce(c, Map(function(x) x$composerName, programs$works))
composerNames <- composerNames[!is.na(composerNames)]
composerNames
composer_names <- Reduce(c, Map(function(x) x$composerName, programs$works))
composer_names <- composer_names[!is.na(composer_names)]
hist(composer_names)
hist(factor(composer_names))
table(composer_names)
foo <- table(composer_names)
foo
hist(foo)
max(foo)
foo["Mozart, Wolfgang Amadeus"]
foo["Zuraj, Vito"]
foo["Zuraj,  Vito"]
composer_names[1]
library(stringr)
?str_replace_all
space()
composer_names <- str_replace_all(composer_names, c(space(), ","), " ")
composer_names <- str_replace_all(composer_names, c('[:space:]' , ","), " ")
composer_names
composer_names <- str_replace_all(composer_names, ",", " ")
composer_names
composer_names <- str_replace_all(composer_names, c(",", "\t"), " ")
composer_names
composer_names[1]
composer_names <- str_replace_all(composer_names, "\t", " ")
compose_names
composer_names
composer_names[1]
foo[1]
foo[2]
foo <- table(composer_names)
foo[1]
foo[names(foo) == "Beethoven   Ludwig  van"]
foo[names(foo) == "Beethoven   Ludwig van"]
composer_names <- str_replace_all(composer_names, "\s", "_")
composer_names <- str_replace_all(composer_names, "\\s", "_")
composer_names
?str_split
composer_names[1]
composer_names <- Reduce(c, Map(function(x) x$composerName, programs$works))
composer_names <- composer_names[!is.na(composer_names)]
composer_names <- str_replace_all(composer_names, ",", " ")
composer_names <- str_replace_all(composer_names, "\\s+", "_")
composer_table <- table(composer_names)
composer_table
composer_table["Ludwig_Beethoven_Van"]
composer_names[1]
composer_table["Beethoven_Ludwig_Van"]
composer_table["Beethoven_Ludwig_van"]
composer_table["Mozart_Wolfgang_Amadeus"]
composer_table["Brahms_Johannes"]
sort(composer_table, decreasing = T)
sort(composer_table, decreasing = T)[1:10]
sort(composer_table, decreasing = T)[1:20]
sort(composer_table, decreasing = T)[1:30]
sort(composer_table, decreasing = T)[1:40]
sort(composer_table, decreasing = T)[1:50]
sort(composer_table, decreasing = T)[1:100]
barplot(sort(composer_table)[1:10])
barplot(sort(composer_table, desc=T)[1:10])
barplot(sort(composer_table, decreasing=T)[1:10])
composer_names <- Reduce(c, Map(function(x) x$composerName, programs$works))
composer_names <- composer_names[!is.na(composer_names)]
composer_names <- str_replace_all(composer_names, "\\s+", " ")
composer_table <- table(composer_names)
composer_names[1]
composer_names[5000]
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
plot(sort(composer_table, decreasing=TRUE)[1:10])
ggplot(data=sort(composer_table, decreasing=TRUE)[1:10])
?table
composer_df <- as.data.frame(composer.table)
composer_df <- as.data.frame(composer_table)
View(composer_df)
composer_df$composer_names[1]
composer_df <- as.data.frame(composer_table, stringsAsFactors = FALSE)
composer_df[1]
composer_df[,1]
composer_df <- as.data.frame(composer_table, stringsAsFactors = FALSE)
View(composer_df)
?as.data.frame
composer_df <- as.data.frame(sort(composer_table, decreasing=TRUE),
stringsAsFactors = FALSE)
View(composer_df)
ggplot(data=composer_df, aes(x=composerNames, y=Freq)) +
geom_bar(stat="identity")
ggplot(data=composer_df[1:20,], aes(x=composer_names, y=Freq)) +
geom_bar(stat="identity")
ggplot(data=composer_df[1:10,], aes(x=composer_names, y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count")
ggplot(data=composer_df[1:10,], aes(x=composer_names)) +
geom_bar(stat="bin") +
xlab("Composer")
ggplot(data=composer_df[1:10,], aes(x=composer_names)) +
geom_bar(stat="count") +
xlab("Composer")
ggplot(data=composer_df[1:10,], aes(x=composer_names)) +
geom_bar(stat="bin") +
xlab("Composer")
ggplot(data=composer_df[1:20,], aes(x=composer_names, y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count")
ggplot(data=composer_df[1:20,], aes(x=composer_names, y=reorder(Freq))) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count")
ggplot(data=composer_df[1:20,], aes(x=reorder(composer_names, Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count")
ggplot(data=composer_df[1:20,], aes(x=reorder(composer_names, -Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count")
ggplot(data=composer_df[1:10,], aes(x=reorder(composer_names, -Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count")
ggplot(data=composer_df[1:10,], aes(x=reorder(composer_names, -Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
programs$works[[1]]
programs$works[[2]]
programs$works[[2]]$conductorName
conductor_composer <- Reduce(rbind,
Map(function(x) c(x$composerName, x$conductorName),
programs$works))
warnings()
View(conductor_composer)
dim(conductor_composer)
conductor_names <- Reduce(c, Map(function(x) x$conductorName, programs$works))
conductor_names[1:5]
programs$works[[1]]
programs$works[[2]]
composer_names[1:9]
composer_name <- Reduce(c, Map(function(x) x$composerName, programs$works))
conductor_name <- Reduce(c, Map(function(x) x$conductorName, programs$works))
cond_comp <- cbind(composer_name, conductor_name)
programs$works[[2]][,"composerName", "conductorName"]
programs$works[[2]][,c("composerName", "conductorName")]
cond_comp <- Reduce(rbind, Map(function(x) x[,c("composerName", "conductorName")],
programs$works))
programs$works[[1]][,c("composerName", "conductorName")]
programs$works[[1]]
isempty(programs$works[[1]])
dim(programs$works[[1]])
nrow(programs$works[[1]])
cond_comp <- Reduce(rbind, Map(function(x) {
if (nrow(x) != 0) x[,c("composerName", "conductorName")]
}, programs$works))
programs$works[[100]][,c("composerName", "conductorName")]
programs$works[[100]]
cond_comp <- Reduce(rbind, Map(function(x) {
if (nrow(x) != 0) x[,c("composerName", "conductorName")]
}, programs$works))
Reduce(ncol, programs$works)
Map(ncol, programs$works)
programs$works[[9993]]
sapply(ncol, programs$works)
sapply(FUN=ncol, X=programs$works)
which(sapply(FUN=ncol, X=programs$works) < 6)
programs$works[[13831]]
colnames(programs$works[[13831]])
programs$concerts[[13831]]
programs$orchestra[[13831]]
programs$programID[[13831]]
programs$season[[13831]]
unique(unlist(programs$orchestra))
cond_comp <- Reduce(rbind, Map(function(x) {
if (nrow(x) != 0 && ncol(x) > 5) x[,c("composerName", "conductorName")]
}, programs$works))
if (4)
print("hi")
"afe" == "afe"
"afe" == "afa"
cond_comp <- Reduce(rbind, Map(function(x) {
if (nrow(x) != 0 & which(colnames(x == "conductorName")))
x[,c("composerName", "conductorName")]
}, programs$works))
nrow(x)
nrow(NULL)
if(NULL)
print("hi")
c("a", "b") %in% letters
prod(c("a", "b") %in% letters)
prod(c("a", "b") %in% letters) == TRUE
sapply(function(x) {c("composerName", "conductorName") %in% colnames(x)}, programs$works)
programs$works
sapply(FUN = function(x) {c("composerName", "conductorName") %in% colnames(x)},
X = programs$works)
foo <- sapply(FUN = function(x) {c("composerName", "conductorName") %in% colnames(x)},
X = programs$works)
foo
foo <- sapply(FUN = function(x) {
prod(c("composerName", "conductorName") %in% colnames(x)) == TRUE},
X = programs$works)
foo
comp_cond <- Reduce(rbind,
Map(function(x) x[,c("composerName", "conductorName")],
programs$works[[comp_cond_available]]))
comp_cond_available <- sapply(FUN = function(x) {
prod(c("composerName", "conductorName") %in% colnames(x)) == TRUE},
X = programs$works)
comp_cond <- Reduce(rbind,
Map(function(x) x[,c("composerName", "conductorName")],
programs$works[[comp_cond_available]]))
length(programs$works)
comp_cond <- Reduce(rbind,
Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
Map(function(x) x[,c("composerName", "conductorName")],
+                         programs$works[comp_cond_available])
Map(function(x) x[,c("composerName", "conductorName")],                          programs$works[comp_cond_available])
comp_cond <- rbind(Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
View(comp_cond)
comp_cond <- do.call(rbind, Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
install.packages("data.table")
library(data.table)
comp_cond <- rbindlist(Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
View(comp_cond)
comp_cond <- comp_cond[!is.na(comp_cond$composerName) | !is.na(comp_cond$conductorName)]
comp_cond <- rbindlist(Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
comp_cond <- comp_cond[!is.na(comp_cond$composerName) | !is.na(comp_cond$conductorName), ]
comp_cond <- rbindlist(Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
comp_cond <- comp_cond[!is.na(comp_cond$composerName) & !is.na(comp_cond$conductorName), ]
gilbert_comp <- comp_cond[comp_cond$composerName == "Gilbert, Alan"]
?apply
comp_cond <- apply(X = comp_cond, function(x) str_replace_all(x, "\\s+", " "), MARGIN = 2)
comp_cond <- rbindlist(Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
comp_cond <- comp_cond[!is.na(comp_cond$composerName) & !is.na(comp_cond$conductorName), ]
comp_cond <- sapply(X = comp_cond, function(x) str_replace_all(x, "\\s+", " "))
comp_cond <- rbindlist(Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
comp_cond <- comp_cond[!is.na(comp_cond$composerName) & !is.na(comp_cond$conductorName), ]
comp_cond <- lapply(X = comp_cond, function(x) str_replace_all(x, "\\s+", " "))
View(cond_comp)
comp_cond <- rbindlist(Map(function(x) x[,c("composerName", "conductorName")],
programs$works[comp_cond_available]))
comp_cond <- comp_cond[!is.na(comp_cond$composerName) & !is.na(comp_cond$conductorName), ]
comp_cond <- as.data.frame(sapply(X = comp_cond, function(x) str_replace_all(x, "\\s+", " ")))
gilbert_comp <- comp_cond[comp_cond$composerName == "Gilbert, Alan",]
comp_cond[66000,]
comp_cond[66001,]
comp_cond[66001,2]
comp_cond <- as.data.frame(sapply(X = comp_cond,
function(x) str_replace_all(x, "\\s+", " ")),
stringsAsFactors = FALSE)
gilbert_comp <- comp_cond[comp_cond$composerName == "Gilbert, Alan",]
comp_cond[66001,2]
comp_cond[66001,2] == "Gilbert, Alan"
comp_cond$composerName == "Gilbert Alan"
(comp_cond$composerName == "Gilbert Alan")[66001]
comp_cond[66001,2] == "Gilbert, Alan"
str_match(comp_cond$composerName, "Gilbert Alan")
str_detecth(comp_cond$composerName, "Gilbert Alan")
str_detect(comp_cond$composerName, "Gilbert Alan")
str_detect(comp_cond$composerName, "Gilbert Alan")[66001]
comp_cond$composerName[1]
sum(comp_cond$composerName == "Gilbert Alan")
sum(comp_cond$composerName == "Beethoven, Ludwig van")
gilbert_comp <- comp_cond[comp_cond$conductorName == "Gilbert, Alan",]
View(gilbert_comp)
ggplot(data=gilbert_comp[1:10,], aes(x=reorder(composer_names, -Freq))) +
geom_bar(stat="count") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data=gilbert_comp, aes(x=composer_names)) +
geom_bar(stat="count") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data=gilbert_comp, aes(x=composerNames)) +
geom_bar(stat="count") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data=gilbert_comp, aes(x=composerName)) +
geom_bar(stat="count") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
zweden_comp <- comp_cond[comp_cond$conductorName == "Zweden, Jaap van",]
zweden_comp
gilbert_table <- table(gilbert_comp)
gilbert_table
gilbert_df <- as.data.frame(sort(gilbert_table, decreasing=TRUE),
stringsAsFactors = FALSE)
View(gilbert_df)
gilbert_table
ggplot(data=gilbert_df[1:10,], aes(x=reorder(composer_names, -Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
gilbert_table <- table(gilbert_comp$composerName)
gilbert_df <- as.data.frame(sort(gilbert_table, decreasing=TRUE),
stringsAsFactors = FALSE)
ggplot(data=gilbert_df[1:10,], aes(x=reorder(var1, -Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data=gilbert_df[1:10,], aes(x=reorder(Var1, -Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data=gilbert_df[1:20,], aes(x=reorder(Var1, -Freq), y=Freq)) +
geom_bar(stat="identity") +
xlab("Composer") + ylab("Count") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
