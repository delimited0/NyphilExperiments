dim(opinion_dat[1])
dim(opinion_dat[[1])
dim(opinion_dat[[1]])
dim(opinion_dat[[2]])
opinion_dat[[1]]
length(opinion_dat[[1]])
opinion_dat[[1]][1]
library(lda)
?lexicalize
opinion_dat$vocav
opinion_dat$vocab
opinion_dat$vocab[1]
opinion_dat$vocab[2]
opinion_dat$vocab[3]
opinion_dat$vocab[4]
opinion_dat$vocab[5]
opinion_dat$vocab[6]
opinion_dat$vocab[7]
opinion_dat$vocab[10]
opinion_dat$vocab[100]
opinion_dat$vocab[120]
opinion_dat$vocab[130]
opinion_dat$documents[[2]][1]
opinion_dat$documents[[1]]
opinion_dat$documents[[2]]
class(opinion_dat)
class("DocumentTermMatrix")
typeof(opinion_dat$documents[[1]])
class(opinion_dat$documents[[1]])
class(opinion_dat$documents)
?Map
length(opinion_dat$vocab)
dim(opinion_dtm)
union(opinion_dat$documents[1,])
union(Map(function(x){x[1,]}, opinion_dat$documents))
union(Map(function(x){x}, opinion_dat$documents))
?"union"
opinion_dat$documents[[1]][1,]
opinion_dat$documents[[1]][1000,]
opinion_dat$documents[[1000]][1,]
opinion_dat$documents[[6000]][1,]
union
Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents))
length(Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents)))
class(opinion_dat)
docs$documents
corpus
length(opinion_dat$documents)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents)
)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
Map(function(x){sum(x[2,])}, opinion_dat$documents)
unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
periods
foo
vector(mode="list", length=3)
p
opinion_dat
documents[[foo==1]]
corpus$documents[[foo==1]]
opinion_dat$documents[[foo==1]]
?Filter
bar
bar = list(3,4,5,2,5,6,2)
bar
bar[[3:5]]
bar[3:5]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t()
baz = corpus_seq_t(opinion_dat, periods)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
Map(function(x){sum(x[2,])},
opinion_dat$documents)
Reduce(max, Map(function(x){sum(x[2,])},
opinion_dat$documents))
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
baz = corpus_seq_t(opinion_dat, foo)
class(doc)
class(doc) != "matrix"
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[1]]
docs_by_period[[2]]
Reduce(min, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(ax, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period))
Reduce(min, Map(function(x){length(x)},docs_by_period))
Map(function(x){length(x)},docs_by_period)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
doc
typeof(doc)
class(doc)
class(doc)
class(doc) == "matrix"
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
opinion_dat$documents[[148]]
class(opinion_dat$documents[[148]])
opinion_dat$documents[[148]][1,]
rep(1,0)
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
NULL
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[1]]
docs_by_period[[2]]
docs_by_period[[3]]
docs_by_period[[4]]
unique(periods)
unique(foo)
foo == 1
which(foo == 1)
which(foo == 148)
which(foo == 147)
which(foo == 146)
which(foo == 145)
which(foo == 144)
which(foo == 143)
which(foo == 142)
which(foo == 141)
periods==p
foo==1000
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
p
periods==p
length(corpus$documents)
length(foo)
dim(opinion_dtm)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
periods = period_identity(opinion$date[-opinion_dtm_zero_idx])
periods = period_identity(opinion$date[-opinion_dtm_zero_idx], month)
periods
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[14]]
docs_by_period[[146]]
p
periods
rm(foo)
baz = corpus_seq_t(opinion_dat, periods)
baz
names(baz)
baz$len
baz$corpi
baz$corpi$docs[[1]]
baz$corpi$docs[[2]]
baz$corpi$docs
baz$corpi[[1]]
baz$corpi[[1]]$docs
baz$corpi[[1]]$docs[[1]]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, periods)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
vector(mode="numeric", length=3)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
system('pwd')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_vem.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_vem.cpp')
3.3 + 3.7 + 4 + 3 + 3.7 + 4 + 3 + 3.7 + 3.7 + 3.3 + 3.7 + 3.7 + 4 + 3.3 + 3 + 3.3 + 3.3 + 3.7 + 3.7 + 3.3 + 3.7 + 4 + 3.7 + 3.7 + 3 + 3 + 4 + 3.3 + 3.7 + 4 + 4 + 4
114.5/32
114.5/31
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
library(lubridate)
library(tm)
library(stringr)
source("/Users/patrickding/Documents/Projects/TopicModel/dataFuncs.R")
source("/Users/patrickding/Documents/Projects/TopicModel/dtm_funcs.R")
data(acq)
Rcpp::sourceCpp('Documents/Projects/TopicModel/topicmodel/lda_gibbs.cpp')
source('~/Documents/Projects/TopicModel/topicmodel/lda.R')
acq_lda <- lda(DocumentTermMatrix(acq), K=10, method="gibbs")
acq_lda$beta
class(acq_lda)
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
#cartoon_idx <- str_detect(opinion$kicker, ignore.case("cartoon"))
#keep.idx <- opinion$article != "  " # cartoons have no text, drop them
#opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!cartoon_idx])))
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion.dtm <- DocumentTermMatrix(opinion.docs)
opinion.dtm.count <- rowSums(as.matrix(opinion.dtm))
opinion.dtm.zero.idx <- opinion.dtm.count == 0
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!opinion.dtm.zero.idx])))
opinion.dtm <- DocumentTermMatrix(opinion.docs)
opinion.dtm <- removeSparseTerms(opinion.dtm, sparse=.99)
opinion_lda <- lda(dtm=opinion.dtm, K = 10, method = "gibbs")
rowSums(opinion_lda$beta)
colSums(opinion_lda$beta)
plot(lgamma(1:100))
lines(lgamma(1:100))
lines(lgamma(1:100))
plot.new
plot.new()
lines(lgamma(1:100))
plot9)
plot()
rpois(10)
rpois(10, 1)
rpois(1, 1)
rpois(1, 100)
rpois(1, 2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
rbinom(n=1, size=100, prob = .2)
log_gammas <- rbinom(n=100, size=50, prob=.2)
hist(log_gammas)
counts <- rbinom(n=100, size=50, prob=.2)
e_log_gammas <- lgamma(counts)
mean(e_log_gammas)
lgamma(.2)
lgamma(.2*50)
probs <- seq(from=0, to = 1, by = .1)
counts <- apply(probs, 1, function(x) rbinom(n=100, size=50, prob=x))
counts <- sapply(probs, 1, function(x) rbinom(n=100, size=50, prob=x))
counts <- sapply(probs, function(x) rbinom(n=100, size=50, prob=x))
counts
e_log_gammas <- lgamma(counts)
warnings9)
warnings())
warnings()
lgamma(0)
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=50, prob=x))
e_log_gammas <- lgamma(counts)
probs
counts
e_log_gammas
mean(e_log_gammas)
rowMeans(e_log_gammas)
counts
colMeans(e_log_gammas)
lgamma(probs*50)
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
plot(x=probs, y= cbind(actual, approx))
plot(x=probs, y= rbind(actual, approx))
plot(x=probs, y= actual)
plot(x=probs, y=list(actual, approx))
cbind(actual, approx)
plot(cbind(actual, approx))
plot(x=probs, cbind(actual, approx))
plot(x=t(probs), cbind(actual, approx))
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=10, prob=x))
e_log_gammas <- lgamma(counts)
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=10, prob=x))
e_log_gammas <- lgamma(counts)
e_log_gammas
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
plot(actual, approx)
approx
actual
probs <- seq(from=.1, to = 1, by = .1)
counts <- sapply(probs, function(x) rbinom(n=100, size=100, prob=x))
e_log_gammas <- lgamma(counts)
actual <- colMeans(e_log_gammas)
approx <- lgamma(probs*50)
plot(actual, approx)
actual
approx
e_log_gammas
actual
approx
2780*12
5700*4
62/3
setwd("~/Documents/Projects/PerformanceHistory")
load("programs.RData")
fields_present <- sapply(FUN = function(x) {
all(c("composerName", "conductorName") %in% colnames(x))
}, X = programs$works)
programs$works[[2]]
programs$works[[2]]$workTitle
programs$works[[2]]$composerName
?paste
paste(letters, letters)
letters
paste(letters, letters, collapse = ":")
paste(letters, letters, sep = ":")
paste(programs$works[[2]]$composerName, programs$works[[2]]$workTitle, sep = ":")
paste(programs$works[[2]]$composerName, programs$works[[2]]$workTitle, sep = ": ")
piece_cond_time <- Filter(function(z) !is.null(z),
Map(function(x, y) {
if (nrow(x) != 0 & nrow(y) != 0) {
dat <- cbind(x[!is.na(x$workTitle), c("composerName", "conductorName")],
rep(as.Date(y[,"Date"]), length(x$composerName)),
stringsAsFactors = FALSE)
colnames(dat) <- c("piece", "conductor", "date")
dat$piece <-
return(dat)
}
}, programs$works[fields_present], programs$concerts[fields_present])
)
piece_cond_time <- Filter(function(z) !is.null(z),
Map(function(x, y) {
if (nrow(x) != 0 & nrow(y) != 0) {
dat <- cbind(x[, c("composerName", "conductorName")],
rep(as.Date(y[,"Date"]), length(x$composerName)),
stringsAsFactors = FALSE)
colnames(dat) <- c("piece", "conductor", "date")
dat$piece <- paste(x$composerName, x$workTitle, sep = ": ")
return(dat)
}
}, programs$works[fields_present], programs$concerts[fields_present])
)
piece_cond_time[[1]]
piece_cond_time[[2]]
piece_cond_time <- Filter(function(z) !is.null(z),
Map(function(x, y) {
if (nrow(x) != 0 & nrow(y) != 0) {
dat <- cbind(x[!is.na(x$workTitle), c("composerName", "conductorName")],
rep(as.Date(y[,"Date"]), length(x$composerName)),
stringsAsFactors = FALSE)
colnames(dat) <- c("piece", "conductor", "date")
dat$piece <- paste(x$composerName, x$workTitle, sep = ": ")
return(dat)
}
}, programs$works[fields_present], programs$concerts[fields_present])
)
paste(NA)
piece_cond_time[[100]]
piece_cond_time <- Map(function(x) {
x[!is.na(x$piece) & !is.na(x$conductor),]
}, comp_cond_time)
piece_cond_time <- Map(function(x) {
x[!is.na(x$piece) & !is.na(x$conductor),]
}, piece_cond_time)
piece_cond_time[[1]]
pieces <- unlist(Reduce(c, Map(function(x) x$piece, comp_cond_time)))
pieces_unique <- unique(pieces)
peices_id <- match(pieces, pieces_unique)
pieces <- unlist(Reduce(c, Map(function(x) x$piece, piece_cond_time)))
pieces_unique <- unique(pieces)
peices_id <- match(pieces, pieces_unique)
pieces_id <- match(pieces, pieces_unique)
conductors <- unlist(Reduce(c, Map(function(x) x$conductor, piece_cond_time)))
conductors_unique <- unique(conductors)
conductors_id <- match(conductors, conductors_unique)
dates <- unlist(Reduce(c, Map(function(x) x$date, piece_cond_time)))
dates[dates == 0] <- 1e-7
dates[dates == 1] <- 1 - 1e-7
piece_cond_time[[1]]
dates
dates(13833)
dates[13833]
dates
piece_cond_time[[1]]
piece_cond_time[[1]]$date
min_date <- piece_cond_time[[1]]$date[1]
max_date <- piece_cond_time[[length(piece_cond_time)]]$date[1]
comp_cond_time <- Map(function(x) {
x$date = as.numeric(x$date - min_date) / as.numeric(max_date - min_date)
return(x)
}, piece_cond_time)
dates <- unlist(Reduce(c, Map(function(x) x$date, piece_cond_time)))
dates[dates == 0] <- 1e-7
dates[dates == 1] <- 1 - 1e-7
dates[1]
piece_cond_time[1]
piece_cond_time <- Map(function(x) {
x$date = as.numeric(x$date - min_date) / as.numeric(max_date - min_date)
return(x)
}, piece_cond_time)
rm(comp_cond_time)
dates <- unlist(Reduce(c, Map(function(x) x$date, piece_cond_time)))
dates[dates == 0] <- 1e-7
dates[dates == 1] <- 1 - 1e-7
dates
nyphil_ctot <- ctot_gibbs(composers = pieces_id-1, conductors = conductors_id-1, dates = dates,
K = 20, alpha = 1, eta = .01, nu = .5, iter = 500)
Rcpp::sourceCpp('ctot.cpp')
nyphil_ctot <- ctot_gibbs(composers = pieces_id-1, conductors = conductors_id-1, dates = dates,
K = 20, alpha = 1, eta = .01, nu = .5, iter = 500)
nyphil_ctot$vocab <- composers_unique
nyphil_ctot$vocab <- pieces_unique
source('~/Documents/Projects/TopicModel/topicmodel/posterior_stats.R')
source('~/Documents/Projects/TopicModel/topicmodel/posterior_stats.R')
Rcpp::sourceCpp('~/Documents/Projects/TopicModel/topicmodel/posterior_stats.cpp')
source('~/Documents/Projects/TopicModel/topicmodel/posterior_stats.R')
get_topics <- function(lda, K) {
term_score <- term_score(lda, K)
vocab_mat <- matrix(data=lda$vocab, nrow=length(lda$vocab), K)
apply(term_score, 2, function(x) {
vocab_mat[order(x)[1:K]]
})
}
get_topics(nyphil_ctot, 15)
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 1], shape2 = nyphil_ctot$psi[2, 1]), add = FALSE)
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 2], shape2 = nyphil_ctot$psi[2, 2]), add = FALSE)
get_topics(nyphil_ctot, 15)[2]
get_topics(nyphil_ctot, 15)[,2]
get_topics(nyphil_ctot, 20)[,2]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 3], shape2 = nyphil_ctot$psi[2, 3]), add = FALSE)
get_topics(nyphil_ctot, 20)[,3]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 4], shape2 = nyphil_ctot$psi[2, 4]), add = FALSE)
get_topics(nyphil_ctot, 20)[,4]
get_topics(nyphil_ctot, 30)[,4]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 5], shape2 = nyphil_ctot$psi[2, 5]), add = FALSE)
get_topics(nyphil_ctot, 30)[,5]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 6], shape2 = nyphil_ctot$psi[2, 6]), add = FALSE)
get_topics(nyphil_ctot, 30)[,6]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 7], shape2 = nyphil_ctot$psi[2, 7]), add = FALSE)
get_topics(nyphil_ctot, 30)[,7]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 8], shape2 = nyphil_ctot$psi[2, 8]), add = FALSE)
get_topics(nyphil_ctot, 30)[,8]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 9], shape2 = nyphil_ctot$psi[2, 9]), add = FALSE)
get_topics(nyphil_ctot, 30)[,9]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 10], shape2 = nyphil_ctot$psi[2, 10]), add = FALSE)
get_topics(nyphil_ctot, 30)[,10]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 11], shape2 = nyphil_ctot$psi[2, 11]), add = FALSE)
get_topics(nyphil_ctot, 30)[,11]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 12], shape2 = nyphil_ctot$psi[2, 12]), add = FALSE)
get_topics(nyphil_ctot, 30)[,12]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 13], shape2 = nyphil_ctot$psi[2, 13]), add = FALSE)
get_topics(nyphil_ctot, 30)[,13]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 14], shape2 = nyphil_ctot$psi[2, 14]), add = FALSE)
get_topics(nyphil_ctot, 30)[,14]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 15], shape2 = nyphil_ctot$psi[2, 15]), add = FALSE)
get_topics(nyphil_ctot, 30)[,15]
apply(nyphil_ctot$psi, 2, function(psi) {
curve(dbeta(x, shape1 = psi[1], shape2 = psi[2]), add = TRUE)
})
apply(nyphil_ctot$psi, 2, function(psi) {
curve(dbeta(x, shape1 = psi[1], shape2 = psi[2]), add = TRUE)
})
get_topics(nyphil_ctot, 30)[,1]
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 20], shape2 = nyphil_ctot$psi[2, 20]), add = FALSE)
get_topics(nyphil_ctot, 30)[,20]
get_topics(nyphil_ctot, 15)
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 18], shape2 = nyphil_ctot$psi[2, 18]), add = FALSE)
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 19], shape2 = nyphil_ctot$psi[2, 19]), add = FALSE)
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 17], shape2 = nyphil_ctot$psi[2, 17]), add = FALSE)
curve(dbeta(x, shape1 = nyphil_ctot$psi[1, 13], shape2 = nyphil_ctot$psi[2, 13]), add = FALSE)
nyphil_ctot$z
nyphil_ctot$theta[conductors_unique == "Bernstein, Leonard"]
plot(nyphil_ctot$theta[conductors_unique == "Bernstein, Leonard"])
get_topics(nyphil_ctot, 15)[,8]
get_topics(nyphil_ctot, 15)[,13]
get_topics(nyphil_ctot, 15)[,5]
nyphil_ctot <- ctot_gibbs(composers = pieces_id-1, conductors = conductors_id-1, dates = dates,
K = 10, alpha = 1, eta = .01, nu = .5, iter = 500)
get_topics(nyphil_ctot, 15)
nyphil_ctot$vocab <- pieces_unique
get_topics(nyphil_ctot, 15)
apply(nyphil_ctot$psi, 2, function(psi) {
curve(dbeta(x, shape1 = psi[1], shape2 = psi[2]), add = TRUE)
})
apply(nyphil_ctot$psi, 2, function(psi) {
curve(dbeta(x, shape1 = psi[1], shape2 = psi[2]), add = TRUE)
})
nyphil_ctot$z
length(nyphil_ctot$z)
